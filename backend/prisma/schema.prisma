generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  uuid      String     @unique @default(uuid())
  name      String
  surname   String?
  username  String?    @unique
  email     String     @unique
  password  String?
  avatar    String?
  bio       String?
  role      UserRole   @default(USER)
  isActive  Boolean    @default(true)
  isBlocked Boolean    @default(false)
  isDeleted Boolean    @default(false)
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  articles  Article[]
  bookmarks Bookmark[]
  comments  Comment[]
  likes     Like[]

  @@map("users")
}

model Category {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  slug                String                @unique
  description         String?
  color               String?
  icon                String?
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  website             String?
  tokenSymbol         String?
  blockchain          String?
  articles            Article[]
  galleryItems        GalleryItem[]
  protocol_menu_items protocol_menu_items[]

  @@map("categories")
}

model Tag {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  slug      String       @unique
  createdAt DateTime     @default(now())
  articles  ArticleTag[]

  @@map("tags")
}

model Article {
  id           Int           @id @default(autoincrement())
  title        String
  slug         String        @unique
  excerpt      String
  content      String
  image        String?
  status       ArticleStatus @default(DRAFT)
  isFeatured   Boolean       @default(false)
  isBreaking   Boolean       @default(false)
  views        Int           @default(0)
  likes        Int           @default(0)
  publishedAt  DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  authorId     Int
  categoryId   Int
  contentType  String?       @default("NEWS")
  tags         ArticleTag[]
  author       User          @relation(fields: [authorId], references: [id])
  category     Category      @relation(fields: [categoryId], references: [id])
  bookmarks    Bookmark[]
  comments     Comment[]
  gallery      GalleryItem[]
  articleLikes Like[]

  @@map("articles")
}

model ArticleTag {
  articleId Int
  tagId     Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tags")
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   String
  status    CommentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    Int
  articleId Int
  parentId  Int?
  article   Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentReplies")
  user      User          @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  articleId Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, articleId])
  @@map("likes")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  articleId Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, articleId])
  @@map("bookmarks")
}

model Advertisement {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  image       String
  url         String
  position    AdPosition
  isActive    Boolean    @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  views       Int        @default(0)
  clicks      Int        @default(0)

  @@map("advertisements")
}

model GalleryItem {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  url         String
  type        MediaType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articleId   Int?
  categoryId  Int?
  article     Article?  @relation(fields: [articleId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])

  @@map("gallery_items")
}

model protocol_menu_items {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  description String?
  color       String?
  icon        String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  categoryId  Int
  categories  Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, slug])
}

enum UserRole {
  USER
  AUTHOR
  EDITOR
  ADMIN
  SUPER_ADMIN
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum AdPosition {
  SIDEBAR
  BANNER_TOP
  BANNER_MIDDLE
  BANNER_BOTTOM
  INLINE
  POPUP
}

enum MediaType {
  IMAGE
  VIDEO
  ANIMATION
  DOCUMENT
}
